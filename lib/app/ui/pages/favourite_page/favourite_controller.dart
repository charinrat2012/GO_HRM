
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:go_hrm/app/data/models/menu_model.dart';

import '../../global_widgets/datalist.dart';

class FavouriteController extends GetxController {
  final isEditing = false.obs;
  final favoriteItems = <MenuModel>[].obs;
  final allMenuCategories = <MenuCategory>[].obs;
  final int favoriteLimit = 8;

  @override
  void onInit() {
    super.onInit();
    _prepareMenuData();
    _prepareDefaultFavorites();
  }

  void _prepareMenuData() {
    final allMenus =
        DataList.allMenus.map((map) => MenuModel.fromMap(map)).toList();

    final Map<String, List<MenuModel>> groupedMenus = {};
    for (var menu in allMenus) {
      if (groupedMenus[menu.category] == null) {
        groupedMenus[menu.category] = [];
      }
      groupedMenus[menu.category]!.add(menu);
    }

    final categories = groupedMenus.entries.map((entry) {
      return MenuCategory(title: entry.key, items: entry.value);
    }).toList();

    allMenuCategories.assignAll(categories);
  }

  void _prepareDefaultFavorites() {
    // --- üõ†Ô∏è ‡∏à‡∏∏‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏µ‡πà 2: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ---
    // ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏°‡∏≤‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    // ‡πÅ‡∏ï‡πà‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ userid: 1 ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    const String currentUserId = '1';

    // 1. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏ô‡∏π‡πÇ‡∏õ‡∏£‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏≤‡∏Å `favoriteMenu`
    final userFavoritesData = DataList.favoriteMenu.firstWhere(
      (fav) => fav['userid'] == currentUserId,
      orElse: () => <String, dynamic>{}, // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ Map ‡∏ß‡πà‡∏≤‡∏á‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠
    );

    // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏à‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ `iconId` ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (userFavoritesData.isNotEmpty && userFavoritesData['iconId'] is List) {
      // 3. ‡∏î‡∏∂‡∏á List ‡∏Ç‡∏≠‡∏á ID ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
      final List<String> favoriteIds = List<String>.from(userFavoritesData['iconId']);

      // 4. ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏à‡∏≤‡∏Å `allMenus` ‡∏ó‡∏µ‡πà‡∏°‡∏µ 'iconId' ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö ID ‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤
      final defaultFavorites = DataList.allMenus
          .where((menu) => favoriteIds.contains(menu['iconId']))
          .map((map) => MenuModel.fromMap(map))
          .toList();

      // 5. ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ `favoriteItems` (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
      if (defaultFavorites.length > favoriteLimit) {
        favoriteItems.assignAll(defaultFavorites.take(favoriteLimit));
      } else {
        favoriteItems.assignAll(defaultFavorites);
      }
    } else {
      // ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡πÉ‡∏´‡πâ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
      favoriteItems.clear();
    }
  }

  void toggleEditMode() {
    isEditing.value = !isEditing.value;
  }

  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏à‡∏≤‡∏Å `title` ‡πÄ‡∏õ‡πá‡∏ô `id`
  bool isFavorite(MenuModel item) {
    return favoriteItems.any((favItem) => favItem.iconId == item.iconId);
  }

  void addToFavorites(MenuModel item) {
    if (favoriteItems.length >= favoriteLimit) {
      Get.snackbar(
        '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ',
        '‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î $favoriteLimit ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£',
        snackPosition: SnackPosition.BOTTOM,
        backgroundColor: Colors.black54,
        colorText: Colors.white,
        margin: const EdgeInsets.all(12),
      );
      return;
    }

    if (!isFavorite(item)) {
      favoriteItems.add(item);
    }
  }

  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏à‡∏≤‡∏Å `title` ‡πÄ‡∏õ‡πá‡∏ô `id`
  void removeFromFavorites(MenuModel item) {
    favoriteItems.removeWhere((favItem) => favItem.iconId == item.iconId);
  }
}
