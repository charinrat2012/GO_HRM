import 'package:get/get.dart';
import '../../../data/models/document_status_model.dart';
import '../../../data/services/auth_service.dart'; // 1. Import AuthService
import '../../global_widgets/datalist.dart'; // 2. Import DataList

class DocumentsController extends GetxController {
  // 3. ‡∏î‡∏∂‡∏á AuthService ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
  final AuthService _authService = Get.find<AuthService>();

  // --- State Variables (‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞) ---
  final RxInt selectedViewIndex = 0.obs;
  final RxList<DocumentHistoryModel> docHistory = <DocumentHistoryModel>[].obs;
  final expandedCardIndex = Rxn<int>();

  // ... (‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Dropdown ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ...
  final years = ['2025', '2024', '2023'].obs;
  final RxnString selectedYear = RxnString('2025');
  final months = [
    '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
    '‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°',
    '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå',
    '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°',
    '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô',
    '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°',
    '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô',
    '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°',
  ].obs;
  final RxnString selectedMonth = RxnString('‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î');
  final RxList<String> docTypes = <String>['‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'].obs;
  // `selectedDocumentType` ‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Dropdown
  final RxnString selectedDocTypes = RxnString('‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î');
  final other = ['‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î', '1', '2', '3'].obs;
  final RxnString selectedOther = RxnString('‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î');

  @override
  void onInit() {
    super.onInit();
    loadDocHistory();
    setupDocumentTypeFilter();
  }

  void setupDocumentTypeFilter() {
    //  ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ (‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô Map) ‡∏à‡∏≤‡∏Å DataList
    final docTypesFromDataList = DataList.docTypes;

    //  ‡πÅ‡∏õ‡∏•‡∏á List<Map> ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô List<String> ‡πÇ‡∏î‡∏¢‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡πà‡∏≤ 'type'
    final types = docTypesFromDataList
        .map((doc) => doc['type'] as String)
        .toList();

    //  ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô `documentTypeOptions` ‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
    docTypes.addAll(types);
  }

  void onViewChanged(int? newIndex) {
    if (newIndex != null && selectedViewIndex.value != newIndex) {
      selectedViewIndex.value = newIndex;
      loadDocHistory();
    }
  }

  // --- üõ†Ô∏è ‡∏à‡∏∏‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ---
  void loadDocHistory() {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!_authService.isLoggedIn) {
      docHistory.clear(); // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà ‡πÉ‡∏´‡πâ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      return;
    }

    // ‡∏î‡∏∂‡∏á ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà
    final String currentUserId = _authService.currentUser.value!.userId;

    // --- ‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á "‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á" ---
    if (selectedViewIndex.value == 0) {
      // 1. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Preference ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      final userPrefs = DataList.userPreferData.firstWhere(
        (pref) => pref['userId'] == currentUserId,
        orElse: () => <String, dynamic>{},
      );

      if (userPrefs.isNotEmpty && userPrefs['documentId'] is List) {
        // 2. ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ documentId ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        final List<String> myDocumentIds = List<String>.from(
          userPrefs['documentId'],
        );

        // 3. ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà ID ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        final myDocuments = DataList.documentData
            .where((doc) => myDocumentIds.contains(doc['documentId']))
            .map((map) => DocumentHistoryModel.fromMap(map))
            .toList();

        // 4. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
        docHistory.assignAll(myDocuments);
      } else {
        docHistory.clear(); // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
      }
    }
    // --- ‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á "‡∏Ç‡∏≠‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô" ---
    else {
      // //  ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Preference ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏ß‡πà‡∏≤‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÑ‡∏´‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤)
      // final userPrefs = DataList.userPreferData.firstWhere(
      //   (pref) => pref['userId'] == currentUserId,
      //   orElse: () => <String, dynamic>{},
      // );

      // final List<String> myDocumentIds = userPrefs.isNotEmpty && userPrefs['documentId'] is List
      //     ? List<String>.from(userPrefs['documentId'])
      //     : [];

      // // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà" ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤
      // final employeeDocuments = DataList.documentData
      //     .where((doc) => !myDocumentIds.contains(doc['documentId']))
      //     .map((map) => DocumentHistoryModel.fromMap(map))
      //     .toList();

      // // 3. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
      // docHistory.assignAll(employeeDocuments);
      final employeeDocuments = DataList.documentData
          .map((map) => DocumentHistoryModel.fromMap(map))
          .where((doc) => doc.status == DocumentStatus.pending)
          .toList();

      docHistory.assignAll(employeeDocuments);
    }
  }
}
